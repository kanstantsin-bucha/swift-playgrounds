//import OrderedCollections
import Apollo
import GraphiOSAutogenerated
import Foundation

public struct User: Identifiable {
    public let id: String
    public let name: String
}

public enum GraphError: Error {
    case noData
}

public struct GraphClientPackage {
    private let client = ApolloClient(url: URL(string: "http://localhost:3001/graphql")!)
    
    public init() {}
    
    public func fetchAllUsers() async throws -> [User] {
        try await withCheckedThrowingContinuation { continuation in
            self.client.fetch(query: AllUsersQuery()) { result in
                guard let clientUsers = try? result.get().data?.users else {
                    continuation.resume(throwing: result.error ?? GraphError.noData)
                    return
                }
                continuation.resume(returning: clientUsers.map {
                    User(id: $0.id, name: $0.name)
                })
            }
        }
    }
    
    public func fetchUserBy(id: String) async throws -> User {
        try await withCheckedThrowingContinuation { continuation in
            self.client.fetch(query: UserByIDQuery(id: id)) { result in
                guard let clientUser = try? result.get().data?.user else {
                    continuation.resume(throwing: result.error ?? GraphError.noData)
                    return
                }
                continuation.resume(returning:
                    User(id: clientUser.id, name: clientUser.name)
                )
            }
        }
       
    }
}

extension Result {
    var error: Failure? {
        if case .failure(let failure) = self {
            return failure
        }
        return nil
    }
}
